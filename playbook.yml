- name: Create an instance
  hosts: localhost
  gather_facts: false
  vars:
    disk_name: 'disk-instance'
    snapshot_policy_name: 'daily-backup-last-7d'
    gcp_project: axial-keep-408417
    gcp_cred_kind: serviceaccount
    gcp_cred_file: /mnt/c/Users/marcu/ansible-gcp-account.json
    zone: "us-east1-d"
    region: "us-east1"
    scopes:
    - https://www.googleapis.com/auth/compute

  tasks:
    - name: create a disk
      gcp_compute_disk:
        name: "{{ disk_name }}"
        size_gb: 20 # free tier limit is 30GB/month
        source_image: 'projects/ubuntu-os-cloud/global/images/family/ubuntu-2004-lts'
        zone: "{{ zone }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes: "{{ scopes }}"
        state: present
      register: disk

    - name: create a recurring snapshot schedule for disk
      google.cloud.gcp_compute_resource_policy:
        name: "{{ snapshot_policy_name }}"
        region: "{{ region }}"
        snapshot_schedule_policy:
          schedule:
            daily_schedule:
              days_in_cycle: 1
              start_time: '04:00'
          retention_policy:
            max_retention_days: 7
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes: "{{ scopes }}"
        state: present

    - name: Activate service account for use with raw gcloud
      raw: >
        gcloud auth activate-service-account --key-file={{ gcp_cred_file }}

    - name: Use raw gcloud to bind snapshot schedule to disk
      raw: >
        gcloud compute disks add-resource-policies {{ disk_name }}
        --resource-policies={{ snapshot_policy_name }}
        --zone={{ zone }} --project={{ gcp_project }}

    - name: create a address
      gcp_compute_address:
        name: 'address-instance'
        region: "{{ region }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes: "{{ scopes }}"
        state: present
      register: address

    - name: create a firewall allowing public HTTP/HTTPS access
      google.cloud.gcp_compute_firewall:
        name: public-http
        allowed:
        - ip_protocol: tcp
          ports:
          - '80'
          - '443'
        target_tags:
        - public-http
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        state: present

    - name: create a instance
      gcp_compute_instance:
        state: present
        name: test-vm
        machine_type: e2-micro
        metadata: {
          "enable-oslogin": "TRUE"
        }
        disks:
          - auto_delete: true
            boot: true
            source: "{{ disk }}"
        network_interfaces:
          - network: null # use default
            access_configs:
              - name: 'External NAT'
                nat_ip: "{{ address }}"
                type: 'ONE_TO_ONE_NAT'
        zone: "{{ zone }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes: "{{ scopes }}"
        tags:
          items: [public-http]
      register: instance

    - name: Wait for SSH to come up
      wait_for: host={{ address.address }} port=22 delay=10 timeout=60

    - name: Add host to groupname
      add_host: hostname={{ address.address }} groupname=new_instances


- name: Initial setup on new instances
  hosts: new_instances
  connection: ssh
  become: True
  gather_facts: False
  roles:
    - base_configuration

- name: Idempotent management of all GCP nodes
  hosts: all
  connection: ssh
  become: True
  roles:
    - production_server